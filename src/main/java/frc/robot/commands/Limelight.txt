package frc.robot.commands;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import frc.robot.subsystems.SwerveSubsystem;

public class Limelight extends TimedRobot {

    // NetworkTable and entries for Limelight data
    private NetworkTable limelightTable;
    private NetworkTableEntry tx;
    private NetworkTableEntry ty;
    private NetworkTableEntry ta;

    // Swerve drive module control
    private SwerveSubsystem swerveDrive;

    // Constants for swerve drive control
    private static final double TURN_KP = 0.03; // Turn proportional constant
    private static final double DRIVE_KP = 0.2; // Drive proportional constant
    private static final double STOP_THRESHOLD = 1.0; // Threshold to stop robot (in degrees)

    @Override
    public void robotInit() {
        // Initialize SwerveDrive system (assuming custom class with relevant methods)
        swerveDrive = new SwerveSubsystem();

        // Get Limelight NetworkTable instance and entries
        limelightTable = NetworkTableInstance.getDefault().getTable("limelight");
        tx = limelightTable.getEntry("tx");
        ty = limelightTable.getEntry("ty");
        ta = limelightTable.getEntry("ta");
    }

    @Override
    public void teleopPeriodic() {
        // Get values from Limelight
        double x = tx.getDouble(0.0); // Horizontal offset (tx)
        double y = ty.getDouble(0.0); // Vertical offset (ty)
        double area = ta.getDouble(0.0); // Target area (ta)

        // Post to SmartDashboard for monitoring
        SmartDashboard.putNumber("LimelightX", x);
        SmartDashboard.putNumber("LimelightY", y);
        SmartDashboard.putNumber("LimelightArea", area);

        // If the tag is visible (target area is non-zero), adjust the robot's movement
        if (area > 0.1) {  // Check if we can see the tag (area > 0.1 is a basic threshold)
            // Calculate turning speed (rotate based on horizontal offset)
            double turnSpeed = -x * TURN_KP; // Proportional turning to center tag

            // Optionally, drive forward if the tag is far away (based on area)
            double driveSpeed = 0.0;  // Default forward speed
            if (area < 0.5) { // If tag is small, it's probably farther away
                driveSpeed = DRIVE_KP; // Move forward proportionally
            }

            // Set the swerve drive's speed and angle for each wheel based on the desired movement
            // We'll use the driveSpeed for forward/backward movement and turnSpeed for rotation
            swerveDrive.driveFieldOriented(new ChassisSpeeds(driveSpeed, 0.0, turnSpeed));
        } else {
            // If no tag is detected, stop the robot or continue scanning
            swerveDrive.driveFieldOriented(new ChassisSpeeds(0.0, 0.0, 0.0)); // Stop all movement
        }

        // If the tag is centered, stop the robot after a brief delay
        if (Math.abs(x) < STOP_THRESHOLD && Math.abs(y) < STOP_THRESHOLD) {
            // Optionally, use a timer to stop robot after it has been centered for a moment
            Timer.delay(1.0); // Wait for a second, just for demonstration purposes
           swerveDrive.driveFieldOriented(new ChassisSpeeds(0.0, 0.0, 0.0)); // Stop the robot
        }
    }
}